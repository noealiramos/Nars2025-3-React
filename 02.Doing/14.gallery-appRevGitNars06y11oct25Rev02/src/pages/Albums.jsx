/**
 * ============================================================================
 * ALBUMS - P√ÅGINA DE VISTA DE √ÅLBUMES
 * ============================================================================
 *
 * Componente p√°gina que muestra la lista de √°lbumes en formato grid.
 *
 * PROP√ìSITO:
 * - Mostrar todos los √°lbumes disponibles
 * - Proporcionar acceso a acciones (editar, eliminar, reproducir)
 * - Manejar estado vac√≠o con mensaje amigable
 * - Organizar √°lbumes en grid responsivo
 *
 * CONCEPTOS CLAVE:
 * - Page component: Componente de nivel p√°gina
 * - List rendering: Map para renderizar lista
 * - Empty state: UI cuando no hay datos
 * - Event delegation: Handlers intermedios con logging
 * - PropTypes validation: Validaci√≥n de props
 *
 * ATOMIC DESIGN:
 * Page = Compone m√∫ltiples molecules (AlbumCard) en un layout
 *
 * JERARQU√çA:
 * App ‚Üí Albums (page) ‚Üí AlbumCard (molecule) ‚Üí Atoms (buttons)
 *
 * FLUJO DE DATOS:
 * Props down: albums array
 * Events up: onEditAlbum, onPlayAlbum, onDeleteAlbum
 */

// ==========================================================================
// IMPORTACIONES
// ==========================================================================

import PropTypes from "prop-types";
import AlbumCard from "../molecules/AlbumCard"; // Tarjeta de √°lbum
import "./Pages.css"; // Estilos compartidos de p√°ginas

// ==========================================================================
// COMPONENTE ALBUMS
// ==========================================================================

/**
 * Albums - P√°gina de vista de √°lbumes
 *
 * @param {Object} props
 * @param {Array} props.albums - REQUERIDO: Array de √°lbumes a mostrar
 * @param {Function} props.onEditAlbum - Callback al editar √°lbum
 * @param {Function} props.onPlayAlbum - Callback al reproducir √°lbum
 * @param {Function} props.onDeleteAlbum - Callback al eliminar √°lbum
 *
 * CONCEPTO - Page Component:
 * Componente de nivel superior que representa una vista completa.
 *
 * RESPONSABILIDADES:
 * 1. Recibir datos (albums)
 * 2. Manejar estado vac√≠o
 * 3. Renderizar lista de componentes
 * 4. Delegar eventos a componente padre
 *
 * NO maneja:
 * - Estado propio de la lista
 * - L√≥gica de negocio
 * - Llamadas a API
 * (Todo eso est√° en App.js)
 *
 * PATR√ìN:
 * Presentational component = Solo presenta datos y delega eventos
 */
export default function Albums({
  albums,
  onEditAlbum,
  onPlayAlbum,
  onDeleteAlbum,
}) {
  // ========================================================================
  // HANDLERS - INTERMEDIARIOS
  // ========================================================================

  /**
   * handlePlayAlbum - Intermediario para reproducir √°lbum
   *
   * @param {Object} album - √Ålbum a reproducir
   *
   * CONCEPTO - Handler Wrapper:
   * ¬øPor qu√© no pasar onPlayAlbum directamente a AlbumCard?
   *
   * RAZONES:
   * 1. Logging: console.log para debugging
   * 2. Transformaci√≥n: Podr√≠amos modificar datos antes de enviar
   * 3. Analytics: Podr√≠amos enviar eventos de tracking
   * 4. Validaci√≥n: Verificar datos antes de propagar
   *
   * PATR√ìN:
   * AlbumCard ‚Üí handlePlayAlbum ‚Üí console.log ‚Üí onPlayAlbum ‚Üí App.js
   *
   * OPTIONAL CHAINING:
   * onPlayAlbum?.(album)
   *
   * Solo llama si la funci√≥n existe.
   * Props callback son opcionales en PropTypes.
   *
   * CONSOLE.LOG:
   * √ötil en desarrollo para ver qu√© eventos se disparan.
   * En producci√≥n, se eliminar√≠an o usar√≠an con NODE_ENV check.
   */
  const handlePlayAlbum = (album) => {
    console.log("Playing album:", album.title);
    onPlayAlbum?.(album);
  };

  /**
   * handleDeleteAlbum - Intermediario para eliminar √°lbum
   *
   * @param {Object} album - √Ålbum a eliminar
   *
   * Similar a handlePlayAlbum.
   * En una app real, aqu√≠ podr√≠as:
   * - Mostrar confirmaci√≥n
   * - Validar permisos
   * - Enviar analytics
   */
  const handleDeleteAlbum = (album) => {
    console.log("Deleting album:", album.title);
    onDeleteAlbum?.(album);
  };

  // ========================================================================
  // RENDER - ESTADO VAC√çO
  // ========================================================================

  /**
   * EARLY RETURN - Empty State
   *
   * CONDICI√ìN:
   * !albums || albums.length === 0
   *
   * Verifica:
   * 1. albums es null/undefined (!albums)
   * 2. O es array vac√≠o (albums.length === 0)
   *
   * CONCEPTO - Empty State UI:
   * Mostrar interfaz amigable cuando no hay datos.
   *
   * ALTERNATIVA MALA:
   * Mostrar nada o "No data" simple.
   *
   * BUENA PR√ÅCTICA:
   * - Icono visual (üìÅ)
   * - T√≠tulo claro
   * - Mensaje explicativo
   * - Instrucciones (c√≥mo agregar √°lbumes)
   *
   * UX:
   * Usuario nuevo ve inmediatamente qu√© hacer.
   * No se siente "perdido" con pantalla vac√≠a.
   *
   * ESTRUCTURA:
   * Container ‚Üí Empty state ‚Üí Content (icon + title + message)
   */
  if (!albums || albums.length === 0) {
    return (
      <div className="albums-container">
        <div className="albums-empty">
          <div className="albums-empty__content">
            {/* Icono visual grande */}
            <span className="albums-empty__icon">üìÅ</span>

            {/* T√≠tulo del empty state */}
            <h3 className="albums-empty__title">No hay √°lbumes disponibles</h3>

            {/* Mensaje instructivo */}
            <p className="albums-empty__message">
              Comienza creando tu primer √°lbum desde el bot√≥n "+" en la barra
              superior.
            </p>
          </div>
        </div>
      </div>
    );
  }

  // ========================================================================
  // RENDER - LISTA DE √ÅLBUMES
  // ========================================================================

  /**
   * ESTRUCTURA:
   * Container ‚Üí Grid ‚Üí AlbumCards
   *
   * .albums-container:
   * - Contenedor principal de la p√°gina
   * - Padding y m√°rgenes generales
   *
   * .albums-grid:
   * - CSS Grid o Flexbox
   * - Responsivo (1 col mobile, 2-3 cols tablet, 4+ cols desktop)
   * - Gap entre elementos
   *
   * ARRAY.MAP():
   * Transforma cada album en un componente AlbumCard.
   *
   * KEY PROP:
   * key={album.id || index}
   *
   * Preferencia: album.id (√∫nico y estable)
   * Fallback: index (si no hay id)
   *
   * IMPORTANCIA DE KEY:
   * React usa key para:
   * 1. Identificar elementos de forma √∫nica
   * 2. Optimizar re-renders (solo actualiza cambios)
   * 3. Mantener estado correcto en listas din√°micas
   *
   * KEY INCORRECTA (index) CAUSA PROBLEMAS CUANDO:
   * - Reordenamos la lista
   * - Eliminamos items del medio
   * - Agregamos items al inicio
   *
   * KEY CORRECTA (id √∫nico) SIEMPRE FUNCIONA
   *
   * PROPS PASADAS A ALBUMCARD:
   * - album: Datos completos del √°lbum
   * - onPlay: Handler para reproducir
   * - onDelete: Handler para eliminar
   * - onEdit: Handler para editar (sin wrapper, directo)
   *
   * NOTA: onEdit se pasa directamente sin wrapper
   * porque no necesita logging adicional.
   * Podr√≠amos crear handleEditAlbum si fuera necesario.
   */
  return (
    <div className="albums-container">
      <div className="albums-grid">
        {albums.map((album, index) => (
          <AlbumCard
            key={album.id || index}
            album={album}
            onPlay={handlePlayAlbum}
            onDelete={handleDeleteAlbum}
            onEdit={onEditAlbum}
          />
        ))}
      </div>
    </div>
  );
}

// ==========================================================================
// VALIDACI√ìN DE PROPS
// ==========================================================================

/**
 * PropTypes de Albums
 *
 * PROPS REQUERIDAS:
 * - albums: Array de √°lbumes (obligatorio)
 *
 * PROPS OPCIONALES:
 * - onEditAlbum: Callback para editar
 * - onPlayAlbum: Callback para reproducir
 * - onDeleteAlbum: Callback para eliminar
 *
 * ALBUMS IS REQUIRED:
 * Aunque verificamos !albums en el c√≥digo,
 * marcarlo como isRequired genera warning si no se pasa.
 *
 * VENTAJA:
 * Detecta errores en desarrollo antes de que causen problemas.
 *
 * CALLBACKS OPCIONALES:
 * No son isRequired porque:
 * 1. El componente puede usarse solo para mostrar
 * 2. Usamos optional chaining (?.) al llamarlos
 * 3. Mayor flexibilidad
 *
 * PROPTYPES.ARRAY:
 * Gen√©rico, acepta cualquier array.
 *
 * M√ÅS ESPEC√çFICO (opcional):
 * albums: PropTypes.arrayOf(PropTypes.shape({
 *   id: PropTypes.string.isRequired,
 *   title: PropTypes.string.isRequired,
 *   description: PropTypes.string,
 *   images: PropTypes.array,
 * }))
 *
 * TRADEOFF:
 * - Gen√©rico: M√°s flexible, menos validaci√≥n
 * - Espec√≠fico: M√°s validaci√≥n, m√°s c√≥digo
 *
 * Para este proyecto did√°ctico, PropTypes.array es suficiente.
 */
Albums.propTypes = {
  albums: PropTypes.array.isRequired,  // Array obligatorio
  onEditAlbum: PropTypes.func,         // Callback opcional
  onPlayAlbum: PropTypes.func,         // Callback opcional
  onDeleteAlbum: PropTypes.func,       // Callback opcional
};
